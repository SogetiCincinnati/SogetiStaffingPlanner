//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SogetiStaffingPlanner.Models
{
    using System;
    using System.Collections.Generic;
    
    public partial class Opportunity
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Opportunity()
        {
            this.Positions = new HashSet<Position>();
        }
    
        public int OpportunityId { get; set; }
        public int ClientId { get; set; }
        public int AccountExecutiveUserId { get; set; }
        public int UnitId { get; set; }
        public int RegionId { get; set; }
        public int SoldStatusId { get; set; }
        public string OpportunityName { get; set; }
        public int OpportunityOwnerUserId { get; set; }
        public string OpportunityNotes { get; set; }
        public string ClientContact { get; set; }
        public int LastModifiedUserId { get; set; }
        public System.DateTime LastModified { get; set; }
        public bool Active { get; set; }
    
        public virtual Client Client { get; set; }
        public virtual Region Region { get; set; }
        public virtual SoldStatus SoldStatus { get; set; }
        public virtual Unit Unit { get; set; }
        public virtual User User { get; set; }
        public virtual User User1 { get; set; }
        public virtual User User2 { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Position> Positions { get; set; }

        internal static object Where(Func<object, bool> p)
        {
            throw new NotImplementedException();
        }
    }
}
